// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SerializationTests.FlatBuffers
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public enum Thing : byte
{
  InA = 0,
  Bag = 1,
};

public struct BigData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static BigData GetRootAsBigData(ByteBuffer _bb) { return GetRootAsBigData(_bb, new BigData()); }
  public static BigData GetRootAsBigData(ByteBuffer _bb, BigData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool BigDataBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "BIGD"); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BigData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int IntValue { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool BoolValue { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string StringValue { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStringValueBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetStringValueBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetStringValueArray() { return __p.__vector_as_array<byte>(8); }
  public double DoubleValue { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public SerializationTests.FlatBuffers.SubData? SubData(int j) { int o = __p.__offset(12); return o != 0 ? (SerializationTests.FlatBuffers.SubData?)(new SerializationTests.FlatBuffers.SubData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SubDataLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public SerializationTests.FlatBuffers.SmallData? SmallData(int j) { int o = __p.__offset(14); return o != 0 ? (SerializationTests.FlatBuffers.SmallData?)(new SerializationTests.FlatBuffers.SmallData()).__assign(__p.__vector(o) + j * 2, __p.bb) : null; }
  public int SmallDataLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SerializationTests.FlatBuffers.BigData> CreateBigData(FlatBufferBuilder builder,
      int IntValue = 0,
      bool BoolValue = false,
      StringOffset StringValueOffset = default(StringOffset),
      double DoubleValue = 0.0,
      VectorOffset SubDataOffset = default(VectorOffset),
      VectorOffset SmallDataOffset = default(VectorOffset)) {
    builder.StartTable(6);
    BigData.AddDoubleValue(builder, DoubleValue);
    BigData.AddSmallData(builder, SmallDataOffset);
    BigData.AddSubData(builder, SubDataOffset);
    BigData.AddStringValue(builder, StringValueOffset);
    BigData.AddIntValue(builder, IntValue);
    BigData.AddBoolValue(builder, BoolValue);
    return BigData.EndBigData(builder);
  }

  public static void StartBigData(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddIntValue(FlatBufferBuilder builder, int IntValue) { builder.AddInt(0, IntValue, 0); }
  public static void AddBoolValue(FlatBufferBuilder builder, bool BoolValue) { builder.AddBool(1, BoolValue, false); }
  public static void AddStringValue(FlatBufferBuilder builder, StringOffset StringValueOffset) { builder.AddOffset(2, StringValueOffset.Value, 0); }
  public static void AddDoubleValue(FlatBufferBuilder builder, double DoubleValue) { builder.AddDouble(3, DoubleValue, 0.0); }
  public static void AddSubData(FlatBufferBuilder builder, VectorOffset SubDataOffset) { builder.AddOffset(4, SubDataOffset.Value, 0); }
  public static VectorOffset CreateSubDataVector(FlatBufferBuilder builder, Offset<SerializationTests.FlatBuffers.SubData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSubDataVectorBlock(FlatBufferBuilder builder, Offset<SerializationTests.FlatBuffers.SubData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSubDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSmallData(FlatBufferBuilder builder, VectorOffset SmallDataOffset) { builder.AddOffset(5, SmallDataOffset.Value, 0); }
  public static void StartSmallDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(2, numElems, 2); }
  public static Offset<SerializationTests.FlatBuffers.BigData> EndBigData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SerializationTests.FlatBuffers.BigData>(o);
  }
  public static void FinishBigDataBuffer(FlatBufferBuilder builder, Offset<SerializationTests.FlatBuffers.BigData> offset) { builder.Finish(offset.Value, "BIGD"); }
  public static void FinishSizePrefixedBigDataBuffer(FlatBufferBuilder builder, Offset<SerializationTests.FlatBuffers.BigData> offset) { builder.FinishSizePrefixed(offset.Value, "BIGD"); }
};

public struct SubData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SubData GetRootAsSubData(ByteBuffer _bb) { return GetRootAsSubData(_bb, new SubData()); }
  public static SubData GetRootAsSubData(ByteBuffer _bb, SubData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SubData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string StringValue { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStringValueBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetStringValueBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetStringValueArray() { return __p.__vector_as_array<byte>(4); }
  public int IntValue { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<SerializationTests.FlatBuffers.SubData> CreateSubData(FlatBufferBuilder builder,
      StringOffset StringValueOffset = default(StringOffset),
      int IntValue = 0) {
    builder.StartTable(2);
    SubData.AddIntValue(builder, IntValue);
    SubData.AddStringValue(builder, StringValueOffset);
    return SubData.EndSubData(builder);
  }

  public static void StartSubData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddStringValue(FlatBufferBuilder builder, StringOffset StringValueOffset) { builder.AddOffset(0, StringValueOffset.Value, 0); }
  public static void AddIntValue(FlatBufferBuilder builder, int IntValue) { builder.AddInt(1, IntValue, 0); }
  public static Offset<SerializationTests.FlatBuffers.SubData> EndSubData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SerializationTests.FlatBuffers.SubData>(o);
  }
};

public struct SmallData : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public SmallData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public short ShortValue { get { return __p.bb.GetShort(__p.bb_pos + 0); } }

  public static Offset<SerializationTests.FlatBuffers.SmallData> CreateSmallData(FlatBufferBuilder builder, short ShortValue) {
    builder.Prep(2, 2);
    builder.PutShort(ShortValue);
    return new Offset<SerializationTests.FlatBuffers.SmallData>(builder.Offset);
  }
};


}
